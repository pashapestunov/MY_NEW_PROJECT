
try:
    numbers = int(input('ввод: '))
except (RuntimeError, TypeError, NameError, ValueError):
    pass


try:
    numbers = input('ввод: ')
except RuntimeError:
    print('один случай')
except TypeError:
    print('второй случай')


try:
    print('10' + 10)
    print(1 / 0)
except (TypeError, ZeroDivisionError):
    print('неверный ввод')


try:
    """ 
    исполняем какой-то код
    """
except Exception as e:
    """
    обработка исключений
    """
else:
    """
    код, который будет тсполнен в случае, когда не возникло исключение
    """
finally:
    """
    код, который будет исполнен в любом случае
    """

"""
В иерархии исключений две основные группы:
● Системные исключения
● Обыкновенные исключения
Если обработку первых лучше не делать (а если и делать,
то чётко понимать, для чего), то обработку второй группы
Python отдаёт под ответственность программиста.
К системным исключениям можно отнести:
● SystemExit – исключение, порождаемое функцией sys.exit
при выходе из программы
● KeyboardInterrupt – возникает при прерывании
программы пользователем
● GeneratorExit – возникает при вызове метода close
объекта generator
"""

try:
    number = int(input('Введите число: '))
    print('вы ввели', number)
except ValueError as e:
    print('сведение об ошибке', e)
print('THE END')


try:
    a = int(input('first num: '))
    b = int(input('second num: '))
    if b == 0:
        raise ZeroDivisionError
except:
    print('division by 0')
print('some text')

#reise ValueError('несоответствующее значение')


"""
                Assertions
Оператор assert позволяет программисту вставлять
утверждения в код, которые автоматически прекращают
выполнение, если утверждение ложно. В приведенном
примере утверждение проверяет, что итоговая цена не
станет отрицательной и не превысит начальную.
"""


def apply_discount(product_price, discount):
    final_price = product_price * (1 - discount)
    assert 0 <= final_price <= product_price, "Invalid final prise"
    return final_price

"""
Различия между raise и assert:
Назначение:
● Raise используется для явного возбуждения
исключений в различных условиях
● Assert используется для отладочных утверждений,
чтобы проверять предположения программиста
Отключение:
● Исключения, поднятые с помощью raise, не могут
быть отключены в продакшн-коде
● Утверждения, сделанные с помощью assert, могут
быть глобально отключены с помощью флага
оптимизации -O при запуске Python.
"""

"""
Типы исключений:
● Raise может поднимать любой тип исключения
● Assert всегда поднимает AssertionError, если
утверждение не выполняется
Утверждения – мощный инструмент для отладки и
проверки кода в процессе разработки. Однако важно
использовать их осознанно и не полагаться на них в
ситуациях, где требуется явная обработка ошибок.
"""